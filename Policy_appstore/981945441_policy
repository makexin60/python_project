Sign in to view Sameh’s full profile
Sign in
Email or phone
Password
Show
or
By clicking Continue to join or sign in, you agree to LinkedIn’s
User Agreement
,
Privacy Policy
, and
Cookie Policy
.
New to LinkedIn?
Join now
or
New to LinkedIn?
Join now
By clicking Continue to join or sign in, you agree to LinkedIn’s
User Agreement
,
Privacy Policy
, and
Cookie Policy
.
Sameh Salama
Sign in to view Sameh’s full profile
Sign in
Email or phone
Password
Show
or
By clicking Continue to join or sign in, you agree to LinkedIn’s
User Agreement
,
Privacy Policy
, and
Cookie Policy
.
New to LinkedIn?
Join now
or
New to LinkedIn?
Join now
By clicking Continue to join or sign in, you agree to LinkedIn’s
User Agreement
,
Privacy Policy
, and
Cookie Policy
.
iOS Team Leader
See your mutual connections
View mutual connections with Sameh
Sign in
Email or phone
Password
Show
or
By clicking Continue to join or sign in, you agree to LinkedIn’s
User Agreement
,
Privacy Policy
, and
Cookie Policy
.
New to LinkedIn?
Join now
or
New to LinkedIn?
Join now
By clicking Continue to join or sign in, you agree to LinkedIn’s
User Agreement
,
Privacy Policy
, and
Cookie Policy
.
Join to view profile
Message
Sign in to view Sameh’s full profile
Sign in
Email or phone
Password
Show
or
By clicking Continue to join or sign in, you agree to LinkedIn’s
User Agreement
,
Privacy Policy
, and
Cookie Policy
.
New to LinkedIn?
Join now
or
New to LinkedIn?
Join now
By clicking Continue to join or sign in, you agree to LinkedIn’s
User Agreement
,
Privacy Policy
, and
Cookie Policy
.
Nagwa
Higher Technological Institute
Report this profile
About
iOS Engineer / Ex-Electrical Engineer
Experience
iOS Team Leader
Nagwa
Dec 2019
-
Dec 2023
4 years 1 month
Cairo, Egypt
iOS Engineer
Freelance iOS Developer
Mar 2015
-
Dec 2019
4 years 10 months
Egypt
-iOS, watchOS, macOS Developer
-Objective-C , Swift
-Many iOS Apps on Apple App-Store
-Apple Watch App that was rejected and I am working on it to resubmit
-I have my own side projects that can be reused (Ex. Side Menu)
iOS Team Leader
Robusta Studio
Feb 2019
-
Nov 2019
10 months
Senior iOS Engineer
Robusta Studio
Sep 2018
-
Jan 2019
5 months
Cairo, Egypt
iOS Instructor
ITShare
May 2019
-
Jul 2019
3 months
Modify the course curriculum
Teach novice programmers the fundamentals of programming
Help students acquire and set up necessary equipment
Before diving in, introduce new ideas in a simple and intuitive manner.
Prepare practice projects to provide a smooth learning curve.
Prior to teaching new concepts and features, test the students' expertise.
iOS Instructor
ITShare
Dec 2018
-
Feb 2019
3 months
iOS Instructor
ITShare
Aug 2018
-
Oct 2018
3 months
Senior iOS Engineer
Appizona
Feb 2018
-
Aug 2018
7 months
Cairo Governorate, Egypt
Senior iOS Engineer
Revival
Jun 2017
-
Feb 2018
9 months
Egypt
iOS Engineer
34ML
Jun 2016
-
Jun 2017
1 year 1 month
Heliopolis
iOS Engineer
Icon Media Solutions
Mar 2016
-
Jan 2017
11 months
Egypt
iOS Engineer
Grand
Jan 2016
-
May 2016
5 months
Egypt
Trainee iOS Engineer
iPhoneIslam
Oct 2015
-
Dec 2015
3 months
Egypt
Zone Manager
Power Factor Electromechanicl Works LLC
Jan 2014
-
Jul 2015
1 year 7 months
Senior Project Engineer
Barkouky Organization
May 2010
-
Jan 2014
3 years 9 months
Cairo, Egypt
Project Engineer
Oasis Investment Company (Al Shirawi Group)
Apr 2006
-
Nov 2009
3 years 8 months
Dubai, UAE
Education
Higher Technological Institute
Bachelor Degree in Electrical Engineering
Electrical, Electronics and Communications Engineering
1996
-
2004
Activities and Societies: IBC
-Computer Hardware Maintenance 
-Software Installation & Troubleshooting

AIAT (Sakr Factory)
-Electronics Boards Fabrication 
-Air Conditioner Ducting 

Prime
-MCSE Core Requirements (Microsoft)

TCC
-Practical training for using PLC in control industry Siemens sires 5 
-Pneumatic 

Jelecom
-Microcontroller & Microprocessor 
-GSM 
-Fire Alarm & Fighting System 
-ISDN 
-Computer Networks & it's Applications
Licenses & Certifications
Duolingo Spanish Fluency: Beginner (Estimated)
Duolingo
Issued
Jul 2016
See credential
Courses
Basic Health & Safety in Construction
-
Computer Networks & it's Applications
-
Essential iOS Developer
-
Hacking with macOS - Build 18 Desktop Apps with Swift 3
-
MCSE Core Requirements
-
PLC
-
The Bitfountain iOS 7 Immersive
-
The Bitfountain iOS 8 with Swift Immersive
-
The Complete Apple Watch Developer Course - Build 14 Apps
-
The Complete iOS8 and Swift Course: Learn by Building 15 Real World Apps
-
Projects
Nagwa Classes
Mar 2023
- Present
See project
Nagwa Languages
Jan 2023
- Present
See project
Nagwa Sessions for Educators
Jan 2023
- Present
Nagwa Readers
Jan 2022
- Present
See project
Nagwa Chat
Jan 2020
- Present
See project
Nagwa Connect for Educators
Jan 2020
- Present
See project
Nagwa Connect for Students
Jan 2020
- Present
See project
Nagwa Engage for Educators
Jan 2020
- Present
Nagwa Engage for Students
Jan 2020
- Present
Nagwa Studio
Jan 2020
- Present
See project
Nagwa Study
Dec 2019
- Present
Nagwa Visuals
Dec 2019
- Present
Trovo
Mar 2018
Social Hub for Australia
See project
Gafsha
Feb 2018
Restaurants Reservations
See project
XCleaner
Sep 2017
macOS app that cleans Xcode mess
See project
Zbeel
Aug 2017
Delivery app for KSA
See project
QA Smart
Feb 2017
App for pharmaceuticals to test their knowledge (Merck Group)
See project
SSHoneyCombView
Feb 2017
A honeycomb View that looks like a collection view with hexagon shaped items written in Swift 3, compatible with iOS 8 and later
See project
Laundry Locker Egypt
Dec 2016
See project
Just Help
Oct 2016
an app for a friend
See project
سند
Oct 2016
See project
Go Go Car
Jun 2016
iOS app was done all by myself
See project
صورة هلالية
Apr 2016
a project that has been made by me for al-yasser.com.sa as a freelancing project
See project
5 Stars Rating Template Sketch Resource
Jan 2016
5 stars Sketch file, can be used for ratings assets
See project
Photo Dated
Dec 2015
See project
Sibha سبحة
Apr 2015
See project
HD ShoppingList
Sep 2018
-
Sep 2018
Restaurant Shopping Assistant
See project
Bella Donna
-
Languages
English
-
Organizations
Apple iOS Developer Program
iOS Developer
Mar 2015
- Present
Recommendations received
Yoosif Sherif
“Sameh was my first team lead. Sameh gave space to team members and encouraged them to do their best and helped form an atmosphere where creativity in problem-solving is encouraged. I can say that Sameh's brilliant communication skills are rare these days among software developers. Technically, Sameh is passionate about mobile development and have sharp attention to detail regarding UI/UX. I also remember that he was quick in connecting his apps with backend APIs.”
1 person has recommended Sameh
Join now to view
View Sameh’s full profile
See who you know in common
Get introduced
Contact Sameh directly
Join to view full profile
Other similar profiles
Michael Sadek
Educator | Edtech Leader | Project Manager
Cairo, Egypt
Connect
Mahmoud Mohamed
Project Manager
Cairo, Egypt
Connect
Omar Aziz
Helsinki
Connect
Alaa Eldin Hamed
Senior Software Development Manager at e& Dubai
Dubai, United Arab Emirates
Connect
Mohamed Hegazy
Head of Tutor Supply at Baims with expertise in Data Analysis.
Cairo, Egypt
Connect
Mostafa Hendawi
iOS Developer
Al Jizah, Egypt
Connect
Mostafa Sayed
Cairo, Egypt
Connect
Dina Ali
Software Quality Control Team Leader at Nagwa
Al Jizah, Egypt
Connect
Martin Sorsok
New Cairo
Connect
Amr Ahmed
Senior Android Developer
Egypt
Connect
Ahmed Menaim 🇵🇸
Senior/Lead Software Engineer in iOS
Cairo, Egypt
Connect
islam Nabil
E-commerce Professional | Expert in Merchant Growth, People Development,Specializing in Growth and Expansion
Cairo
Connect
Muhammed Fareed
Cairo, Egypt
Connect
Marwa Al Shamy, PMP
Transforming Education through Innovative EdTech Solutions
Cairo, Egypt
Connect
latifa El sharawy
Team Leader for Outdoor department at Elnassera group
Egypt
Connect
Mohamed Hossam
Technical Support Engineer at National Company For Electric Equipment
Egypt
Connect
Mohamed Youssef
Senior Drilling, Workover & Well Intervention Operation Engineer @ PETROBEL / ENI | IWCF Certified / DE - DSV | Supervisors Well Control | ToT Certified | Well Intervention Supervisor | FDP Expert
New Cairo
Connect
Ayman A . Aziz Mohamed
Signage Team Leader in Office of Events Management at the American University in Cairo.
New Cairo
Connect
Youssef Khalifa
Cairo, Egypt
Connect
Lina Eissa,  APTD
Business Unit Head at LearnKhana Business
Cairo, Egypt
Connect
Show more profiles
Show fewer profiles
Explore more posts
Adnan Saleem
𝗪𝗵𝗮𝘁 𝗜 𝗼𝗳𝗳𝗲𝗿: 💭 

- 𝗕𝗮𝗰𝗸𝗲𝗻𝗱: ASP.NET, Node.js, Firebase.
- 𝗙𝗿𝗼𝗻𝘁-𝗲𝗻𝗱: React.js, Angular.js.
- 𝗗𝗲𝗽𝗹𝗼𝘆𝗺𝗲𝗻𝘁: Azure, AWS.
- 𝗣𝗶𝘅𝗲𝗹-𝗣𝗲𝗿𝗳𝗲𝗰𝘁 𝗗𝗲𝘀𝗶𝗴𝗻: Stunning, Retina-optimized, cross-browser.
- 𝗘𝘅𝗽𝗲𝗿𝘁 𝗨𝗜/𝗨𝗫 𝗗𝗲𝘃𝗲𝗹𝗼𝗽𝗺𝗲𝗻𝘁: HTML5, CSS3, JS.
- 𝗠𝗼𝗱𝗲𝗿𝗻 𝗗𝗲𝘃𝗲𝗹𝗼𝗽𝗺𝗲𝗻𝘁 𝗣𝗿𝗮𝗰𝘁𝗶𝗰𝗲𝘀: Efficient, maintainable CSS preprocessors.

#Fullstackdevelopment
#Solutionarchitect
#Azureexpert
#upworkExpert
#Deployment
#Developmentprocess
#Webdevelopment
#FreeConsultation
#APIintegration
14
3 Comments
Leonardo Santos-Macias. Ph.D, M.Sc
🔧 𝐁𝐚𝐜𝐤𝐞𝐧𝐝 𝐃𝐞𝐯𝐞𝐥𝐨𝐩𝐦𝐞𝐧𝐭 🖥️

Backend development is the backbone of any application, managing data and server interactions. It involves creating server-side logic that communicates with databases, handles user authentication, and integrates APIs to ensure smooth data flow. Key languages for backend development include Java, C#, Python, and Node.js, with databases such as MySQL, PostgreSQL, and MongoDB being crucial for data management.

🔑 𝑲𝒆𝒚 𝑹𝒆𝒔𝒑𝒐𝒏𝒔𝒊𝒃𝒊𝒍𝒊𝒕𝒊𝒆𝒔:

1️⃣ Building Server Logic: Crafting the core functionalities that power the application.
2️⃣ Database Management: Designing and maintaining databases for efficient data storage and retrieval.
3️⃣ API Integration: Developing and integrating APIs to connect frontend and backend seamlessly.
4️⃣ Implementing Security: Ensuring data protection through authentication methods like OAuth and JWT.

💡 𝑬𝒔𝒔𝒆𝒏𝒕𝒊𝒂𝒍 𝑻𝒐𝒐𝒍𝒔:

Express.js: A minimalist web framework for Node.js.
Django: A high-level Python web framework that encourages rapid development.
Spring Boot: A Java framework for building production-ready applications.
Flask: A lightweight WSGI web application framework for Python.
Postman: For testing and documenting APIs.

🎓 𝑭𝒓𝒆𝒆 𝑳𝒆𝒂𝒓𝒏𝒊𝒏𝒈 𝑹𝒆𝒔𝒐𝒖𝒓𝒄𝒆𝒔:

1️⃣ FreeCodeCamp - Backend Development: https://lnkd.in/gRfsr-dX
2️⃣ Coursera - Backend Development Courses: https://lnkd.in/gzqy_cwf
3️⃣ Codecademy - Learn Java: https://lnkd.in/gv6nhJTg
4️⃣ EdX - Python for Everybody: https://lnkd.in/gCuSQ7hP
5️⃣ YouTube - Traversy Media Backend Tutorials: https://lnkd.in/gYRjJ29q
Mastering backend development allows you to build robust applications that are secure, scalable, and efficient. Stay updated with industry trends and continuously refine your skills!

Keep reading the repost below for even more insights. If possible, follow the author as well.

If you find this helpful, PLEASE 👍 Like (👍), Share (🔄), and Re-post (🔁)!

#BackendDevelopment #Java #CSharp #Python #NodeJS #APIs #DatabaseManagement #DataSecurity #SoftwareDevelopment #WebDevelopment #FreeLearning #TechEducation #DevCommunity #Coding #LearningJourney #BackendEngineer #Microservices #AgileDevelopment #OpenSource #TechSkills #CloudComputing
3
Sandeep Balachandran
⭐ 𝗗𝗮𝗶𝗹𝘆 𝗧𝗶𝗽𝘀 ( 𝐃𝐚𝐲 922)
Angular 16 : Features 4: esbuild based build system
For more 👉 #sandtips
#angular #webdev #js
1
Gulzar Ahmad Bilal
Best Practices for Improving Performance of ASP.NET Core Applications:
Use caching:
HTTP-based response caching
Set by the Cache-Control header
Distributed cache
Use a distributed cache to store data that needs fast access. Caching with third-party libraries For example, Redis Cache
In-memory caching
In-memory caching uses the server's memory to store cached data. This type of caching is suitable for one or more servers. 
Cache Tag Helper
Use cache tag helper in MVC applications, for example:
<cache expires-after="@TimeSpan.FromSeconds(120)">
    Current Time Inside Cache Tag Helper: @DateTime.Now
</cache>
Always use asynchronous programming and avoid blocking requests:
Recommendations:
X  Do not use:
Method calls that can block asynchronous calls by exiting Task.Wait orTask.Result.
Avoid blocking at all stages of application development. ASP.NET Core is designed to run everything asynchronously.
✔  Use 
Make 'hot code path' locations asynchronous.
Make requests to the Data access layer and long API operations asynchronously.
Make Controller methods asynchronous. The entire call stack is asynchronous, allowing you to take advantage of async/await patterns.
Minimize large object allocations:
Recommendations:
X  Don't create  many large short-lived objects in the 'hot code path.
✔  Use  caching of large objects that are frequently used. Caching of large objects prevents expensive allocations. You can also use one of the classic  Flyweight patterns to work with such objects.
✔  Use ArrayPool<T>  for storing large arrays.
Using a class ArrayPool<T> to "rent" and "return" buffers (using the Rent and Return methods) can improve performance in situations where arrays are frequently created and destroyed, resulting in significant memory pressure on the garbage collector.
Optimizing Data Access Layer
Efficient reading and writing of data is essential for good performance.
Recommendations:
✔  Use  asynchronous requests to the Data access layer.
✔  Use  caching of frequently used data retrieved from a database or remote service (if business logic allows it). Depending on the scenario, use MemoryCache or DistributedCache. For more information, see Use Caching .
✔  Minimize  the number of requests to get data (the goal is to get data in one request, without making multiple requests)
✔  Use  LINQ query filtering and aggregation (for example, using .Where, .Select, or .Sum operators) to let the database do the filtering.
X  Don't request  more data than necessary. Your requests should return only the data that is needed for the current HTTP request.
X  Avoid  more than N + 1 problems
3
Mohammad Ramezani
𝐇𝐲𝐛𝐫𝐢𝐝 𝐂𝐚𝐜𝐡𝐢𝐧𝐠 𝐒𝐭𝐫𝐚𝐭𝐞𝐠𝐢𝐞𝐬 𝐢𝐧 𝐀𝐒𝐏.𝐍𝐄𝐓 𝐂𝐨𝐫𝐞: 𝐂𝐚𝐜𝐡𝐞𝐝 𝐑𝐞𝐩𝐨𝐬𝐢𝐭𝐨𝐫𝐲 + 𝐒𝐞𝐜𝐨𝐧𝐝-𝐋𝐞𝐯𝐞𝐥 𝐂𝐚𝐜𝐡𝐞 

𝐏𝐚𝐫𝐭 2 𝐨𝐟 2:

𝟑. 𝐇𝐲𝐛𝐫𝐢𝐝 𝐀𝐩𝐩𝐫𝐨𝐚𝐜𝐡: 𝐓𝐡𝐞 𝐁𝐞𝐬𝐭 𝐨𝐟 𝐁𝐨𝐭𝐡 𝐖𝐨𝐫𝐥𝐝𝐬
By combining Cached Repository Pattern and Second-Level Cache, you can achieve:
𝐋𝐨𝐰-𝐋𝐞𝐯𝐞𝐥 𝐐𝐮𝐞𝐫𝐲 𝐂𝐚𝐜𝐡𝐢𝐧𝐠: Use Second-Level Cache for simple queries and relationships managed by EF Core.
𝐇𝐢𝐠𝐡-𝐋𝐞𝐯𝐞𝐥 𝐁𝐮𝐬𝐢𝐧𝐞𝐬𝐬 𝐋𝐨𝐠𝐢𝐜 𝐂𝐚𝐜𝐡𝐢𝐧𝐠: Use Cached Repository Pattern for service-level caching and heavy business logic.
𝐔𝐬𝐞 𝐂𝐚𝐬𝐞: Microservices
In a microservice architecture, repetitive HTTP calls between services can cause bottlenecks. By caching API responses at the repository level, or using Second-Level Cache for complex queries, you reduce latency and improve performance.

𝟒. 𝐂𝐡𝐚𝐥𝐥𝐞𝐧𝐠𝐞𝐬 𝐚𝐧𝐝 𝐒𝐨𝐥𝐮𝐭𝐢𝐨𝐧𝐬
𝐂𝐡𝐚𝐥𝐥𝐞𝐧𝐠𝐞 𝟏: Cache Invalidation Complexity
Problem: Cached Repository struggles with invalidating related entities when using .Include() in EF Core.
Solution: Use Second-Level Cache to handle these scenarios automatically.
𝐂𝐡𝐚𝐥𝐥𝐞𝐧𝐠𝐞 𝟐: Balancing Performance and Memory Usage
Problem: Excessive caching can lead to high memory consumption.
Solution: Use distributed cache systems (e.g., Redis) and set appropriate expiration policies.
𝐂𝐡𝐚𝐥𝐥𝐞𝐧𝐠𝐞 𝟑: Multiple Layers of Caching
Problem: Managing multiple cache layers can complicate debugging.
Solution: Monitor cache health and prioritize caching at the right layer.

𝟓. 𝐊𝐞𝐲 𝐁𝐞𝐧𝐞𝐟𝐢𝐭𝐬
𝐒𝐞𝐩𝐚𝐫𝐚𝐭𝐢𝐨𝐧 𝐨𝐟 𝐂𝐨𝐧𝐜𝐞𝐫𝐧𝐬: Keep caching logic out of application services.
𝐈𝐦𝐩𝐫𝐨𝐯𝐞𝐝 𝐏𝐞𝐫𝐟𝐨𝐫𝐦𝐚𝐧𝐜𝐞: Optimize both database queries and service-level business logic.
𝐒𝐜𝐚𝐥𝐚𝐛𝐢𝐥𝐢𝐭𝐲: Handle high-traffic APIs and complex microservice interactions efficiently.
𝐌𝐚𝐢𝐧𝐭𝐚𝐢𝐧𝐚𝐛𝐢𝐥𝐢𝐭𝐲: Centralize caching rules for easier updates and debugging.

𝟔. 𝐖𝐡𝐞𝐧 𝐭𝐨 𝐔𝐬𝐞 𝐈𝐭
𝐑𝐞𝐚𝐝-𝐇𝐞𝐚𝐯𝐲 𝐀𝐩𝐩𝐥𝐢𝐜𝐚𝐭𝐢𝐨𝐧𝐬: Systems with frequent reads and low write operations.
𝐂𝐨𝐦𝐩𝐥𝐞𝐱 𝐃𝐚𝐭𝐚 𝐑𝐞𝐥𝐚𝐭𝐢𝐨𝐧𝐬𝐡𝐢𝐩𝐬: Applications with extensive use of eager or lazy loading.
𝐌𝐢𝐜𝐫𝐨𝐬𝐞𝐫𝐯𝐢𝐜𝐞𝐬: Environments with repetitive inter-service communication.

𝐅𝐢𝐧𝐚𝐥 𝐓𝐡𝐨𝐮𝐠𝐡𝐭𝐬
The Hybrid Caching Strategy offers a flexible and powerful way to enhance performance in ASP.NET Core applications. By combining the Cached Repository Pattern for high-level abstractions with Second-Level Cache for EF Core, you can build scalable systems with clean architecture while addressing caching challenges effectively.

#ASPNetCore #Caching #PerformanceOptimization #Microservices #RepositoryPattern #SecondLevelCache #CleanArchitecture
Amit Saini
Full Stack React Native Developer

1. Databases:  
  - MongoDB, MySQL

2. Backend Framework:  
  - Express.js for RESTful APIs, middleware, routing, session management, and third-party API integration.

3. Frontend work:
  - React Native: Cross-platform mobile app development.
  - React.js for SPAs, component-based architecture, React hooks, state management (Redux, Context API), and client-side routing.
  - Mobile UI/UX: Responsive design using React Native components.
  - Navigation: React Navigation or Native Navigation experience

4. Backend Environment:  
  - Node.js for server-side execution, asynchronous programming, file handling, and WebSocket communication.
  - Native Modules: Bridging native iOS/Android functionality.
  - Push Notifications/Deep Linking: Firebase, OneSignal, deep linking.

5. Version Control:  
  - Git & GitHub for branching, merging, pull requests, and code collaboration.

6. API Design & Development:  
  - RESTful API design, JWT/OAuth authentication, API versioning, error handling, and GraphQL.

7. Authentication & Security:  
  - JWT, OAuth, bcrypt for password security, XSS, CSRF protection.

8. Frontend Design:  
  - HTML5, CSS3, JavaScript, responsive design (Bootstrap, Tailwind), and CSS preprocessors (SASS/SCSS).

9. State Management:  
  - Redux, React Context API, Redux-Thunk/Redux-Saga.

12. WebSockets:  
  - Real-time applications with Socket.io.

13. Performance Optimization:  
  - MongoDB indexing, React code-splitting, caching, load balancing.

14. Error Handling & Logging:  
  - Error handling across client/server, logging with Winston, and Morgan.

15. Soft Skills:  
  - Problem-solving, teamwork, time management, debugging.
Mohamed Ahmed
🚀 Kotlin Multiplatform Learning Roadmap 🚀

📚 Kotlin Basics  
   - Variables, Functions, Classes, and Objects
   - Null Safety and Collections
   - Extensions and Lambdas

🔄 Kotlin Coroutines & Flow  
   - Coroutine Basics and Builders
   - Suspending Functions and Scopes
   - Flow Basics and Operators

🛠️ Kotlin Multiplatform (KMP) Introduction  
   - Understanding Multiplatform Projects
   - Common, Platform-Specific Code
   - Expect/Actual Mechanism

🚀 Setting Up a KMP Project  
   - Creating a New Multiplatform Project
   - Configuring Gradle for KMP
   - Setting Up Android and iOS Targets

💻 Sharing Business Logic  
   - Writing Common Business Logic
   - Shared Data Models and Repositories
   - Dependency Injection with Koin or Hilt

🌐 Networking in KMP  
   - Ktor for Networking
   - Implementing REST API Calls
   - Handling JSON with Kotlinx Serialization

💾 Data Storage in KMP  
   - Shared Preferences or Settings
   - SQLDelight for Multiplatform Databases
   - Working with Files and Caches

🔧 Platform-Specific Implementations  
   - Expect/Actual Implementations for APIs
   - Using Platform-Specific Features (e.g., Camera, Location)
   - Integrating with Native Android/iOS Libraries

🧪 Multiplatform Testing  
   - Unit Testing with Kotlin Test
   - Writing Platform-Specific Tests
   - Mocking and Dependency Injection in Tests

🎨 UI Development  
   - Jetpack Compose for Android
   - SwiftUI or UIKit for iOS
   - Exploring Compose Multiplatform (Optional)

📦 Dependency Management  
   - Managing Multiplatform Dependencies
   - Gradle Dependency Management
   - Library Compatibility and Versioning

🔍 Debugging & Optimization  
   - Debugging Multiplatform Projects
   - Performance Tuning for KMP
   - Handling Platform-Specific Bugs

⚙️ Advanced KMP Topics  
   - Multithreading and Concurrency in KMP
   - Interoperability with Java/Swift
   - Gradle Build Optimization

🚢 Deployment  
   - Building for Android and iOS
   - App Store/Play Store Deployment
   - Continuous Integration/Continuous Deployment (CI/CD)

🌍 Community and Learning  
   - Kotlin Multiplatform Forums and Groups
   - Attending Conferences and Meetups
   - Contributing to Open-Source Projects

Happy learning! 📚


Learning Material 
https://lnkd.in/dGFVKmcu

JetBrains Android Developers Google Developer Experts #androiddev #kotlin
128
SwiftBeta Swift y SwiftUI
Swift 5.9 allows omitting the return keyword, making code more concise in if and switch expressions #swiftlang
68
1 Comment
Muhammad Zohaib Imtiaz
My New Weather App Developed With Rest Api.Empower Your Day with WeatherWise: Your Ultimate Weather Companion 🌦️ 

Repository:https://lnkd.in/dTi6k8xz

#weather
#rest_api
#database
#weather_app
14
Muazu Abu
Automating React Native App Testing with Appium.

As a React Native engineer, I know that delivering high-quality apps means ensuring smooth functionality across devices and platforms. But let’s face it, manually testing everything can be time-consuming and error-prone. That’s where Appium comes in!

Appium is an open-source, cross-platform tool that automates testing for mobile apps. It’s particularly powerful for React Native apps because it supports iOS and Android. Here’s how Appium helps streamline your testing workflow:

Why Appium?
✅ Cross-Platform Support: Write tests once, and run them on both iOS and Android.
✅ Supports Multiple Frameworks: Works with WebDriver (Selenium) protocols, making it highly adaptable.
✅ Community Backing: Tons of resources and plugins to extend functionality.
✅ Integrates with CI/CD: Automate testing as part of your development pipeline for rapid feedback.

Setting Up Appium for React Native

1️⃣ Install Appium:
//code
npm install -g appium

2️⃣ Choose Your Test Framework: WebDriverIO, Mocha, or Jest are common.
3️⃣ Configure Appium for Your App: Appium works with your app's.apk or.ipa files. Set up desired capabilities, such as:
//code
const capabilities = {
 platformName: 'iOS',
 deviceName: 'iPhone 14 Pro',
 app: '<path-to-your-app>',
 automationName: 'XCUITest', // For iOS
};

4️⃣ Write Your Tests: Use selectors like accessibilityId (React Native’s testID prop) to target UI elements. For example:

//code 
driver.findElement('accessibility id', 'loginButton').click();

5️⃣ Run the Tests: Start the Appium server and execute your test suite.

Best Practices for Appium Testing
🔹 Use unique test IDs (testID in React Native) for reliable element selection.
🔹 Write modular test cases to isolate failures and maintain clean test code.
🔹 Incorporate Appium tests into CI/CD pipelines using tools like GitHub Actions or CircleCI.
🔹 Leverage Appium Desktop for easier element inspection.

My Takeaways
Automating tests with Appium has transformed my development workflow. It reduces regression issues, increases confidence in my releases, and frees up time for innovation.

If you’re a React Native developer looking to level up your testing game, I highly recommend giving Appium a try. Let's make testing efficient, scalable, and fun!

💬 What’s your go-to tool for testing React Native apps? Share your thoughts below!

#ReactNative #Appium #MobileTesting #Automation #SoftwareDevelopment #Tools
19
3 Comments
Sourabh Gupta
Knowledge Sharing: Day 5

Some Common Design Patterns and Architectures Used in Kotlin, Android

Design Patterns

• Builder
• Singleton
• Factory
• Observer
• Repository
• Adapter
• Delegation
• Facade
• Dependency Injection

Architectural Patterns

• MVVM
• MVP
• MVI

#architecture #android #kotlin #design
17
Ali Al Shahat Ali
🌟 𝐌𝐚𝐬𝐭𝐞𝐫𝐢𝐧𝐠 𝐎𝐎𝐏 𝐚𝐧𝐝 𝐒𝐎𝐋𝐈𝐃 𝐏𝐫𝐢𝐧𝐜𝐢𝐩𝐥𝐞𝐬 𝐢𝐧 𝐊𝐨𝐭𝐥𝐢𝐧: 𝐀 𝐂𝐨𝐦𝐩𝐫𝐞𝐡𝐞𝐧𝐬𝐢𝐯𝐞 𝐆𝐮𝐢𝐝𝐞 𝐰𝐢𝐭𝐡 𝐑𝐞𝐚𝐥-𝐖𝐨𝐫𝐥𝐝 𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬 🌟

As an Android developer, understanding Object-Oriented Programming (OOP) and SOLID principles is crucial for building robust applications. This guide covers:
𝐎𝐎𝐏 𝐏𝐫𝐢𝐧𝐜𝐢𝐩𝐥𝐞𝐬: Encapsulation, Inheritance, Polymorphism, and Abstraction, with practical Kotlin examples.
𝐒𝐎𝐋𝐈𝐃 𝐏𝐫𝐢𝐧𝐜𝐢𝐩𝐥𝐞𝐬: Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, and Dependency Inversion, each illustrated with real-world code snippets.
𝐖𝐡𝐲 𝐈𝐭 𝐌𝐚𝐭𝐭𝐞𝐫𝐬:
* Encapsulation protects your data.
* Inheritance promotes code reuse.
* Polymorphism and Abstraction simplify complex systems.
* SOLID principles ensure your code is scalable and maintainable.

Read the full guide for insights on how to implement these principles effectively in your projects!
https://lnkd.in/dMgKbizH

#Kotlin #AndroidDevelopment #OOP #SOLID #ProgrammingTips #CareerDevelopment
13
Pedro Constantino
𝐑𝐨𝐚𝐝𝐦𝐚𝐩 𝐭𝐨 𝐁𝐞𝐜𝐨𝐦𝐢𝐧𝐠 𝐚 𝐒𝐮𝐜𝐜𝐞𝐬𝐬𝐟𝐮𝐥 .𝐍𝐄𝐓 𝐁𝐚𝐜𝐤𝐞𝐧𝐝 𝐃𝐞𝐯𝐞𝐥𝐨𝐩𝐞𝐫 🛣️

If you're looking for a solid career as a .NET backend developer, here are the key steps to stand out in the field:

1 - 𝐏𝐫𝐨𝐠𝐫𝐚𝐦𝐦𝐢𝐧𝐠 𝐅𝐮𝐧𝐝𝐚𝐦𝐞𝐧𝐭𝐚𝐥𝐬
𝐄𝐬𝐬𝐞𝐧𝐭𝐢𝐚𝐥 𝐂𝐨𝐧𝐜𝐞𝐩𝐭𝐬: Start with programming logic and foundational principles, such as:
 - Control structures and flow
 - Object-Oriented Programming (OOP)
 - Design Patterns
 - Data Structures and Algorithms (DSA)

2 - 𝐊𝐧𝐨𝐰𝐥𝐞𝐝𝐠𝐞 𝐨𝐟 𝐭𝐡𝐞 .𝐍𝐄𝐓 𝐄𝐧𝐯𝐢𝐫𝐨𝐧𝐦𝐞𝐧𝐭
𝐄𝐱𝐩𝐥𝐨𝐫𝐚𝐭𝐢𝐨𝐧 𝐨𝐟 𝐭𝐡𝐞 .𝐍𝐄𝐓 𝐄𝐜𝐨𝐬𝐲𝐬𝐭𝐞𝐦: Deepen your understanding of the main components of .NET, including:
 - Common Language Runtime (CLR) and Base Class Library (BCL)
 - Memory management and garbage collection
 - Exception handling and asynchronous programming

3 - 𝐀𝐩𝐩𝐥𝐢𝐜𝐚𝐭𝐢𝐨𝐧 𝐃𝐞𝐯𝐞𝐥𝐨𝐩𝐦𝐞𝐧𝐭 𝐚𝐧𝐝 𝐅𝐫𝐨𝐧𝐭-𝐄𝐧𝐝 𝐈𝐧𝐭𝐞𝐠𝐫𝐚𝐭𝐢𝐨𝐧
𝐁𝐮𝐢𝐥𝐝𝐢𝐧𝐠 𝐖𝐞𝐛 𝐒𝐨𝐥𝐮𝐭𝐢𝐨𝐧𝐬: Learn to build applications and integrate front-end technologies such as:
 - Angular, React, or Blazor
 - Development of RESTful APIs and middleware

4 - 𝐃𝐚𝐭𝐚 𝐀𝐜𝐜𝐞𝐬𝐬 𝐚𝐧𝐝 𝐌𝐚𝐧𝐢𝐩𝐮𝐥𝐚𝐭𝐢𝐨𝐧
𝐃𝐚𝐭𝐚𝐛𝐚𝐬𝐞 𝐈𝐧𝐭𝐞𝐫𝐚𝐜𝐭𝐢𝐨𝐧: Master the use of:
 - Entity Framework Core for ORM
 - LINQ for data queries

5 - 𝐌𝐢𝐜𝐫𝐨𝐬𝐞𝐫𝐯𝐢𝐜𝐞𝐬 𝐀𝐫𝐜𝐡𝐢𝐭𝐞𝐜𝐭𝐮𝐫𝐞 𝐚𝐧𝐝 𝐂𝐥𝐨𝐮𝐝
𝐁𝐮𝐢𝐥𝐝𝐢𝐧𝐠 𝐚𝐧𝐝 𝐌𝐚𝐧𝐚𝐠𝐢𝐧𝐠 𝐌𝐢𝐜𝐫𝐨𝐬𝐞𝐫𝐯𝐢𝐜𝐞𝐬: Understand how to construct and manage microservices using:
 - Cloud services like Azure or AWS
 - Containers with Docker and orchestration with Kubernetes

6 - 𝐓𝐞𝐬𝐭𝐢𝐧𝐠 𝐚𝐧𝐝 𝐂𝐨𝐝𝐞 𝐕𝐚𝐥𝐢𝐝𝐚𝐭𝐢𝐨𝐧
𝐄𝐧𝐬𝐮𝐫𝐢𝐧𝐠 𝐐𝐮𝐚𝐥𝐢𝐭𝐲: Develop skills in:
 - Unit and integration testing with tools like xUnit, TUnit, or NUnit
 - Debugging and code analysis tools

7 - 𝐂𝐨𝐧𝐭𝐢𝐧𝐮𝐨𝐮𝐬 𝐈𝐧𝐭𝐞𝐠𝐫𝐚𝐭𝐢𝐨𝐧 𝐚𝐧𝐝 𝐃𝐞𝐯𝐎𝐩𝐬
𝐀𝐮𝐭𝐨𝐦𝐚𝐭𝐢𝐧𝐠 𝐏𝐫𝐨𝐜𝐞𝐬𝐬𝐞𝐬: Learn to integrate CI/CD into your workflow, including:
 - Pipelines with Azure DevOps and GitHub Actions

8 - 𝐂𝐨𝐦𝐦𝐮𝐧𝐢𝐭𝐲 𝐏𝐚𝐫𝐭𝐢𝐜𝐢𝐩𝐚𝐭𝐢𝐨𝐧 𝐚𝐧𝐝 𝐂𝐨𝐧𝐭𝐢𝐧𝐮𝐨𝐮𝐬 𝐋𝐞𝐚𝐫𝐧𝐢𝐧𝐠
𝐂𝐨𝐧𝐭𝐫𝐢𝐛𝐮𝐭𝐢𝐨𝐧 𝐚𝐧𝐝 𝐍𝐞𝐭𝐰𝐨𝐫𝐤𝐢𝐧𝐠: Engage with the developer community, stay updated, collaborate on open-source projects, and participate in events.

💪 𝐅𝐢𝐧𝐚𝐥 𝐓𝐢𝐩: The journey may be challenging, but passion for programming and a desire to learn will always make a difference. Which steps have you started or wish to explore?

Share your thoughts and experiences in the comments! 👇

#CSharp #Backend #Development #Roadmap #Programming
139
29 Comments
Tamzid Israk Adol
That's a good visual flow of MVI architecture 

#kotlin #android  #architecture #code #Success
1
Kabilsingh Balan
Microservice Design Patterns

Below are commonly used patterns in microservice architecture:

1. Decomposition Patterns
	•	By Business Capability: Break down the system into services that reflect business functions (e.g., payment service, inventory service).
	•	By Subdomain: Use DDD to identify subdomains and implement each as a service.

2. Communication Patterns
	•	API Gateway: Acts as a single entry point for clients, routing requests to the appropriate microservice.
	•	Service Registry and Discovery: Services register themselves, and clients discover them dynamically (e.g., using tools like Eureka or Consul).
	•	Message Brokers: Use asynchronous messaging for inter-service communication (e.g., RabbitMQ, Kafka).

3. Data Management Patterns
	•	Database per Service: Each service manages its own database, ensuring data autonomy.
	•	Saga Pattern: Manages distributed transactions across multiple services using event choreography or orchestration.
	•	CQRS (Command Query Responsibility Segregation): Separates read and write operations to optimize performance and scalability.

4. Resilience Patterns
	•	Circuit Breaker: Prevents cascading failures by stopping calls to a failing service.
	•	Bulkhead: Isolates failures to prevent them from impacting other services.
	•	Retries and Timeouts: Implements retries for transient failures and sets timeouts to prevent long waits.

5. Observability Patterns
	•	Centralized Logging: Aggregates logs across services (e.g., ELK stack).
	•	Distributed Tracing: Tracks requests across services to debug and analyze performance (e.g., Jaeger, Zipkin).
	•	Metrics and Monitoring: Tracks metrics and alerts on system health (e.g., Prometheus, Grafana).

6. Deployment Patterns
	•	Blue-Green Deployment: Ensures zero downtime by switching traffic between two environments.
	•	Canary Deployment: Releases updates to a small subset of users before a full rollout.
	•	Service Mesh: Manages inter-service communication with features like traffic routing, security, and observability.

#java #microservice #designpattern #jaeger #zipkin #prometheus #grafana #ELKstack #Springcloud #eureka #consul #rabbitmq #kafka #learningeveryday
5
Nedjib Kamel
**🔍 BDD vs. DDD vs. TDD: A Quick Comparison**

In software development, **Behavior-Driven Development (BDD)**, **Domain-Driven Design (DDD)**, and **Test-Driven Development (TDD)** offer distinct approaches to creating robust applications. Here’s a concise overview:

### **🔹 BDD (Behavior-Driven Development)**

**Focus:** User behavior and collaboration.  
**Key Features:** Natural language for user stories, acceptance criteria.  
**Use When:** Requirements are complex or change frequently.

### **🔹 DDD (Domain-Driven Design)**

**Focus:** Business domain modeling and strategic design.  
**Key Features:** Bounded contexts, shared domain language.  
**Use When:** Dealing with complex business logic or large teams.

### **🔹 TDD (Test-Driven Development)**

**Focus:** Code reliability and incremental development.  
**Key Features:** Write tests before code, refactor.  
**Use When:** Ensuring high code quality or refactoring existing code.

### **🔍 Choosing the Right Approach**

- **For User Alignment:** BDD
- **For Complex Domains:** DDD
- **For Code Quality:** TDD

Each methodology has unique benefits. Understand their strengths to drive successful software projects.

#BDD #DDD #TDD #SoftwareDevelopment #Agile #Coding
3
Hamlet Marzbani
How to engineering distinguished software by 7 golden rules:

1-Apply best practices to ensure about deliveries' quality
2-Follow the Git Flow
3-Have strong principles of code review
4-Write tests as much as business gives you time
5-Be receptive to technical discussions
6-Automate as much as you can, ex: CI/CD
7-Write strong linter rules

#software_engineer #flutter #mobile #kotlin #dart #java
6
Ahmed EL_Niwehy
Strongly recommend too
1
Krishanpal Rathore
𝗠𝗼𝘀𝘁 𝗨𝘀𝗲𝗱 𝗚𝗶𝘁 𝗰𝗼𝗺𝗺𝗮𝗻𝗱𝘀.
1. 𝐠𝐢𝐭 𝐝𝐢𝐟𝐟: Show file differences not yet staged.
2. 𝐠𝐢𝐭 𝐜𝐨𝐦𝐦𝐢𝐭 -𝐚 -𝐦 "𝐜𝐨𝐦𝐦𝐢𝐭 𝐦𝐞𝐬𝐬𝐚𝐠𝐞": Commit all tracked changes with a message.
3. 𝐠𝐢𝐭 𝐜𝐨𝐦𝐦𝐢𝐭 --𝐚𝐦𝐞𝐧𝐝: Modify the last commit.
4. 𝐠𝐢𝐭 𝐬𝐭𝐚𝐭𝐮𝐬: Show the state of your working directory.
5. 𝐠𝐢𝐭 𝐚𝐝𝐝 𝐟𝐢𝐥𝐞_𝐩𝐚𝐭𝐡: Add file(s) to the staging area.
6. 𝐠𝐢𝐭 𝐜𝐡𝐞𝐜𝐤𝐨𝐮𝐭 -𝐛 𝐛𝐫𝐚𝐧𝐜𝐡_𝐧𝐚𝐦𝐞: Create and switch to a new branch.
7. 𝐠𝐢𝐭 𝐜𝐡𝐞𝐜𝐤𝐨𝐮𝐭 𝐛𝐫𝐚𝐧𝐜𝐡_𝐧𝐚𝐦𝐞: Switch to an existing branch.
8. 𝐠𝐢𝐭 𝐜𝐡𝐞𝐜𝐤𝐨𝐮𝐭 <𝐜𝐨𝐦𝐦𝐢𝐭>: Switches the working directory to a specific commit.
9. 𝐠𝐢𝐭 𝐩𝐮𝐬𝐡 𝐨𝐫𝐢𝐠𝐢𝐧 𝐛𝐫𝐚𝐧𝐜𝐡_𝐧𝐚𝐦𝐞: Push a branch to a remote.
10. 𝐠𝐢𝐭 𝐩𝐮𝐥𝐥: Fetch and merge remote changes.
11. 𝐠𝐢𝐭 𝐟𝐞𝐭𝐜𝐡: Fetch changes from the remote repository without merging.
12. 𝐠𝐢𝐭 𝐫𝐞𝐛𝐚𝐬𝐞 -𝐢: Rebase interactively, rewrite commit history.
13. 𝐠𝐢𝐭 𝐫𝐞𝐛𝐚𝐬𝐞 𝐛𝐫𝐚𝐧𝐜𝐡_𝐧𝐚𝐦𝐞: Rebase the current branch onto another branch.
14. 𝐠𝐢𝐭 𝐜𝐥𝐨𝐧𝐞: Create a local copy of a remote repo.
15. 𝐠𝐢𝐭 𝐦𝐞𝐫𝐠𝐞: Merge branches together.
16. 𝐠𝐢𝐭 𝐥𝐨𝐠 --𝐬𝐭𝐚𝐭: Show commit logs with stats.
17. 𝐠𝐢𝐭 𝐬𝐭𝐚𝐬𝐡: Stash changes for later.
18. 𝐠𝐢𝐭 𝐬𝐭𝐚𝐬𝐡 𝐩𝐨𝐩: Apply and remove stashed changes.
19. 𝐠𝐢𝐭 𝐬𝐡𝐨𝐰 𝐜𝐨𝐦𝐦𝐢𝐭_𝐢𝐝: Show details about a commit.
20. 𝐠𝐢𝐭 𝐫𝐞𝐬𝐞𝐭 𝐇𝐄𝐀𝐃~1: Undo the last commit, preserving changes locally.
21. 𝐠𝐢𝐭 𝐛𝐫𝐚𝐧𝐜𝐡 -𝐃 𝐛𝐫𝐚𝐧𝐜𝐡_𝐧𝐚𝐦𝐞: Delete a branch forcefully.
22. 𝐠𝐢𝐭 𝐫𝐞𝐬𝐞𝐭: Undo commits by moving branch reference.
23. 𝐠𝐢𝐭 𝐫𝐞𝐯𝐞𝐫𝐭 𝐜𝐨𝐦𝐦𝐢𝐭_𝐢𝐝: Create a new commit that undoes the changes of a specific commit.
24. 𝐠𝐢𝐭 𝐜𝐡𝐞𝐫𝐫𝐲-𝐩𝐢𝐜𝐤 𝐜𝐨𝐦𝐦𝐢𝐭_𝐢𝐝: Apply changes from a specific commit.
24. 𝐠𝐢𝐭 𝐛𝐫𝐚𝐧𝐜𝐡: Lists branches.
26. 𝐠𝐢𝐭 𝐫𝐞𝐬𝐞𝐭 --𝐬𝐨𝐟𝐭 𝐇𝐄𝐀𝐃^: Undo the last commit, but keep the changes.
27. 𝐠𝐢𝐭 𝐫𝐞𝐬𝐞𝐭 --𝐡𝐚𝐫𝐝: Resets everything to a previous commit, erasing all uncommitted changes.
28: 𝐠𝐢𝐭 𝐛𝐫𝐚𝐧𝐜𝐡 --𝐬𝐞𝐭-𝐮𝐩𝐬𝐭𝐫𝐞𝐚𝐦-𝐭𝐨 𝐫𝐞𝐦𝐨𝐭𝐞_𝐛𝐫𝐚𝐧𝐜𝐡: Sets the upstream branch to the specified
4
Ali Biglari
Title: Domain-Driven Design (DDD) for Microservices: A Strategic Guide

🔰 Understanding DDD:
Domain-Driven Design (DDD) is a software development approach focusing on understanding and modeling the core domain. It bridges the gap between technical and domain experts, ensuring that both are aligned with the software’s goals.

🔰 DDD in Modern Software Development:
With the shift towards microservices, DDD becomes crucial. It ensures services are well-defined, isolated, and capable of independent evolution, thus enhancing agility and scalability.

Key Concepts 🗝 :
• Entities: Unique objects with a distinct        lifecycle.
• Value Objects: Immutable objects representing descriptive characteristics.
• Aggregates: Clusters of related objects treated as a single unit to maintain       consistency.

🔰 DDD Patterns in Microservices:
1️⃣ Bounded Contexts: Define clear subsystem boundaries.
2️⃣ Repositories: Abstract the database layer.
3️⃣ Factories: Create complex objects.
4️⃣ Services: Focus on specific business logic.

🔰 Relationship between DDD and Microservices:
DDD’s strategic perspective complements microservices’ need for small, manageable, independent services. By dissecting complex domains into subdomains, businesses can create microservices with clear purposes and responsibilities.

🔰 Ensuring Autonomy and Isolation:
Microservices must function autonomously. DDD helps achieve this by minimizing dependencies, allowing services to evolve independently.

🔰 CQRS and Event Sourcing:

🔸 CQRS: Separates command and query operations, optimizing each for its specific purpose.
🔸 Event Sourcing: Stores every state change as an event, ensuring data isn’t lost and system state is traceable.

🔰 Challenges and Solutions:

🔸 Complexity: Breaking down systems into bounded contexts requires clear domain knowledge.
🔸Scalability and Consistency: Event-driven architecture and CQRS can help manage data integrity and optimize scalability.

🔰 Implementing DDD for Microservices:
1️⃣  Understand the Domain: Collaborate with domain experts to identify key concepts.
2️⃣ Define Bounded Contexts: Ensure each microservice has a clear responsibility.
3️⃣ Use DDD Patterns: Apply entities, value objects, aggregates, and repositories.
4️⃣ Adapt Architecture: Embrace iterative development and adapt to evolving business needs.
5️⃣ Foster Collaboration: Promote open communication and feedback loops.

🤘 Conclusion:
Integrating DDD with microservices leads to more responsive, adaptable, and maintainable systems. For successful implementation, businesses should invest in understanding DDD concepts, maintain clear communication, and prioritize training.

By strategically combining DDD with microservices, companies can design systems that cater to current needs and are prepared for future challenges.

♻
#DDD #DomainDrivenDesign #Microservices #SoftwareDevelopment #Backend
6
Show more posts
Show fewer posts
Explore collaborative articles
We’re unlocking community knowledge in a new way. Experts add insights directly into each article, started with the help of AI.
Explore More
Others named
Sameh Salama
in
Egypt
Sameh Salama
--sameh salama
Giza
Sameh Salama
Logistics Manager | Customs Clearance, Customs Regulations,NAFEZA
Alexandria, Egypt
Sameh Salama
Recruitment Manager
Egypt
Sameh Salama
Aspiring Computer Scientist | Passionate About Problem-Solving & Technology | Passionate About Scholarships & Continuous Learning
Cairo
Sameh Salama
Commercial Director @ Horizon Chemical | Sales Management, New Business Development, Global chemical sourcing,
Alexandria, Egypt
83 others named Sameh Salama in Egypt are on LinkedIn
See others named
Sameh Salama
Add new skills with these courses
1h 47m
C++ Design Patterns: Structural
5h 6m
Complete Guide to Java Design Patterns: Creational, Behavioral, and Structural
1h 15m
Planning and Releasing Software with Jira
See all courses